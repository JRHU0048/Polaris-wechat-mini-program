{"_id":"0a4ec1f962c046ca0e0b241119e8384c","abstract":"一个长度为 n 的数组里的所有数字都在 0 到 n-1 的范围内，找出数组中任意一个重复的数字。","classify":"学子风采","content":"<h2>题目链接</h2> <a href=\"https://www.nowcoder.com/practice/6fe361ede7e54db1b84adc81d09d8524?tpId=13\">牛客网</a> <h2>题目描述</h2> 在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。  例如，如果输入长度为7的数组[2,3,1,0,2,5,3]，那么对应的输出是2或者3。存在不合法的输入的话输出-1。 <br> <b>数据范围</b>：0 ≤ n ≤ 10000 <br> <b>进阶</b>：时间复杂度 O(n) ，空间复杂度 O(n) <pre>Input:{2, 3, 1, 0, 2, 5} Output:2</pre> <h2>解题思路</h2> 要求时间复杂度 O(N)，空间复杂度 O(1)。因此不能使用排序的方法，也不能使用额外的标记数组。对于这种数组元素在 [0, n-1] 范围内的问题，可以将值为 i 的元素调整到第 i 个位置上进行求解。在调整过程中，如果第 i 位置上已经有一个值为 i 的元素，就可以知道 i 值重复。以 (2, 3, 1, 0, 2, 5) 为例，遍历到位置 4 时，该位置上的数为 2，但是第 2 个位置上已经有一个 2 的值了，因此可以知道 2 重复： <div align=\"center\">      <img src=\"https://6669-final-6gypsolb231307a9-1304273986.tcb.qcloud.la/%E5%89%91%E6%8C%87Offer/0001.gif\" width=\"350px\">  </div><br> <h2>解题步骤</h2> <ul>     <li>step 1：遍历数组，遇到数组元素与下标相同的不用管。</li>     <li>step 2：遇到数组元素与下标不同，就将其交换到属于它的位置，交换前检查那个位置是否有相同的元素，若有则重复。</li>     <li>step 3：遍历结束完全交换也没重复，则返回-1.</li> </ul> <h2>示例代码</h2> <p>Java/C++/Python示例代码</p> <h3>Java代码</h3> <pre><code>import java.util.*; public class Solution {     //交换函数     private void swap(int[] numbers, int a, int b){         int temp = numbers[a];         numbers[a] = numbers[b];         numbers[b] = temp;     }     public int duplicate (int[] numbers) {         for(int i = 0; i < numbers.length; i++){             //该位置本来就是对的             if(numbers[i] == i)                 continue;             //位置不对，需要换到自己对应的位置             else{                 //对应位置相等，重复                 if(numbers[i] == numbers[numbers[i]])                     return numbers[i];                 //交换位置                 else                     swap(numbers, i, numbers[i]);             }         }         //没有重复         return -1;     } } </code></pre> <h3>C++代码</h3> <pre><code>class Solution { public:     int duplicate(vector<int>& numbers) {         for(int i = 0; i < numbers.size(); i++){             //该位置本来就是对的             if(numbers[i] == i)                 continue;             //位置不对，需要换到自己对应的位置             else{                 //对应位置相等，重复                 if(numbers[i] == numbers[numbers[i]])                     return numbers[i];                 //交换位置                 else                     swap(numbers[i], numbers[numbers[i]]);             }         }         //没有重复         return -1;     } }; </code></pre> <h3>Python代码</h3> <pre><code>from typing import List class Solution:     #交换函数     def swap(self, numbers: List[int], a: int, b: int):         temp = numbers[a]         numbers[a] = numbers[b]         numbers[b] = temp     def duplicate(self , numbers: List[int]) -> int:         for i in range(len(numbers)):             #该位置本来就是对的             if numbers[i] == i:                 continue             #位置不对，需要换到自己对应的位置             else:                 #对应位置相等，重复                 if numbers[i] == numbers[numbers[i]]:                     return numbers[i]                 #交换位置                 else:                     self.swap(numbers, i, numbers[i])         #没有重复         return -1 </code></pre>","isShow":1,"title":"数组中重复的数字","totalCollection":3,"totalComments":0.0,"totalVisits":100.0,"totalZans":2,"_createTime":1656768202249,"_updateTime":1657942631879,"defaultImageUrl":"https://pic1.imgdb.cn/item/67e6b3440ba3d5a1d7e5c28d.jpg","qrCode":"cloud://final-6gypsolb231307a9.6669-final-6gypsolb231307a9-1304273986/0a4ec1f962c046ca0e0b241119e8384c.png","resourceId":"6842667962d0293308fc7ec405f594f0","label":["数组与矩阵",""],"kind":["剑指Offer"],"formattedDate":"2025.3.26"}
{"_id":"0ab5303b62c30cea0cc1bbd52f480208","abstract":"一个二维数组array中每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。判断数组中是否含有某整数。","classify":"学子风采","content":"<h2>题目描述</h2> 在一个二维数组array中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 <br> <b>数据范围</b>：矩阵的长宽满足 0 ≤ n, m ≤ 500，矩阵中的值满足 0 ≤ val ≤ 10^9 <br> <b>进阶</b>：空间复杂度 O(1)，时间复杂度 O(n+m) <pre> Consider the following matrix: [     [1,   4,  7, 11, 15],     [2,   5,  8, 12, 19],     [3,   6,  9, 16, 22],     [10, 13, 14, 17, 24],     [18, 21, 23, 26, 30] ] Given target = 5, return true. Given target = 20, return false. </pre> <h2>解题思路</h2> 要求时间复杂度 O(M + N)，空间复杂度 O(1)。其中 M 为行数，N 为 列数。该二维数组中的一个数，小于它的数一定在其左边，大于它的数一定在其下边。因此，从右上角开始查找，就可以根据 target 和当前元素的大小关系来快速地缩小查找区间，每次减少一行或者一列的元素。当前元素的查找区间为左下角的所有元素。 <div align=\"center\">      <img src=\"https://6669-final-6gypsolb231307a9-1304273986.tcb.qcloud.la/%E5%89%91%E6%8C%87Offer/0002.gif?sign=c5a6fa102d5d5302c36faf9bf565fb63&t=1656949963\" width=\"400px\">  </div><br> <h2>解题步骤</h2> <ul>     <li>step 1：首先获取矩阵的两个边长，判断特殊情况。</li>     <li>step 2：首先以右上角为起点，若是它小于目标元素，则往左移动去找小的，若是他大于目标元素，则往下移动去找大的。</li>     <li>step 3：若是移动到了矩阵边界也没找到，说明矩阵中不存在目标值。</li> </ul> <h2>示例代码</h2> <p>Java/C++/Python示例代码</p> <h3>Java代码</h3> <pre><code> public boolean Find(int target, int[][] matrix) {     if (matrix == null || matrix.length == 0 || matrix[0].length == 0)         return false;     int rows = matrix.length, cols = matrix[0].length;     int r = 0, c = cols - 1; // 从右上角开始     while (r <= rows - 1 && c >= 0) {         if (target == matrix[r][c])             return true;         else if (target > matrix[r][c])             r++;         else             c--;     }     return false; } </code></pre> <h3>C++代码(从左下到右上)</h3> <pre><code> class Solution { public:     bool Find(int target, vector<vector<int> > array) {         //优先判断特殊         if(array.size() == 0)              return false;         int n = array.size();         if(array[0].size() == 0)              return false;         int m = array[0].size();         //从最左下角的元素开始往左或往上         for(int i = n - 1, j = 0; i >= 0 && j < m; ){               //元素较大，往上走             if(array[i][j] > target)                   i--;             //元素较小，往右走             else if(array[i][j] < target)                 j++;             else                 return true;         }         return false;     } }; </code></pre> <h3>Python代码(从左下到右上)</h3> <pre><code> from typing import List class Solution:     def Find(self , target: int, array: List[List[int]]) -> bool:         # 优先判断特殊         if len(array) == 0:               return False         n = len(array)         if len(array[0]) == 0:             return False         m = len(array[0])         i = n-1         j = 0         # 从最左下角的元素开始往左或往上         while i >=0 and j < m:               # 元素较大，往上走             if array[i][j] > target:                   i -= 1             # 元素较小，往右走             elif array[i][j] < target:                   j += 1             else:                 return True         return False </code></pre>","defaultImageUrl":"https://pic1.imgdb.cn/item/67e6b3340ba3d5a1d7e5c284.jpg","isShow":1,"title":"二维数组中的查找","totalCollection":3,"totalComments":1,"totalVisits":87.0,"totalZans":7.0,"_createTime":1656949994122,"_updateTime":1657468244948,"qrCode":"cloud://final-6gypsolb231307a9.6669-final-6gypsolb231307a9-1304273986/0ab5303b62c30cea0cc1bbd52f480208.png","label":["基础算法"],"kind":["类别"],"formattedDate":"2025.3.27"}
{"_id":"058dfefe62c30da70bfd9acd08ec10f9","abstract":"实现一个函数，将一个字符串s中的每个空格替换成\"%20\"","classify":"学科竞赛","content":"<h2>题目描述</h2> 请实现一个函数，将一个字符串s中的每个空格替换成\"%20\"。例如，当字符串为 We Are Happy. 则经过替换之后的字符串为 We%20Are%20Happy. 数据范围: 0 ≤ len(s) ≤ 1000。保证字符串中的字符为大写英文字母、小写英文字母和空格中的一种。 <pre> Input:\"A B\" Output:\"A%20B\" </pre> <h2>解题思路</h2> ① 在字符串尾部填充任意字符，使得字符串的长度等于替换之后的长度。因为一个空格要替换成三个字符（%20），所以当遍历到一个空格时，需要在尾部填充两个任意字符。 ② 令 P1 指向字符串原来的末尾位置，P2 指向字符串现在的末尾位置。P1 和 P2 从后向前遍历，当 P1 遍历到一个空格时，就需要令 P2 指向的位置依次填充 02%（注意是逆序的），否则就填充上 P1 指向字符的值。从后向前遍是为了在改变 P2 所指向的内容时，不会影响到 P1 遍历原来字符串的内容。 ③ 当 P2 遇到 P1 时（P2 \\<= P1），或者遍历结束（P1 \\< 0），退出。 <div align=\"center\">      <img src=\"./pics/0003.gif\" width=\"350px\">  </div><br> <h2>示例代码</h2> <p>Java/C++/Python示例代码</p> <h3>Java代码</h3> <pre><code> public String replaceSpace(StringBuffer str) {     int P1 = str.length() - 1;     for (int i = 0; i <= P1; i++)         if (str.charAt(i) == ' ')             str.append(\"  \");     int P2 = str.length() - 1;     while (P1 >= 0 && P2 > P1) {         char c = str.charAt(P1--);         if (c == ' ') {             str.setCharAt(P2--, '0');             str.setCharAt(P2--, '2');             str.setCharAt(P2--, '%');         } else {             str.setCharAt(P2--, c);         }     }     return str.toString(); } </code></pre> 我们也可以用下标遍历字符串，每次检查下标所在位置的字符是否为空格，如果不是空格，下标继续往后，如果是空格则调用substr函数将字符串从空格前后截断，然后中间添加\"%20\"后相连即可。 <h3>C++代码</h3> <pre><code> class Solution { public:     string replaceSpace(string s) {         string res = \"\";         //遍历字符串         for(int i = 0; i < s.length(); i++){               //非空格直接复制             if(s[i] != ' ')                   res += s[i];             //空格就替换             else                   res += \"%20\";           }         return res;     } }; </code></pre> <h3>Python代码</h3> <pre><code> class Solution:     def replaceSpace(self , s: str) -> str:         res = \"\"         #遍历字符串         for i in s:             #非空格直接复制             if i != ' ':                   res += i             #空格就替换             else:                 res += \"%20\"           return res </code></pre>","defaultImageUrl":"https://pic1.imgdb.cn/item/67e6b3200ba3d5a1d7e5c27a.jpg","isShow":1,"title":"替换空格","totalCollection":3,"totalComments":3,"totalVisits":182,"totalZans":10,"_createTime":1656950183707,"_updateTime":1657468255920,"qrCode":"cloud://final-6gypsolb231307a9.6669-final-6gypsolb231307a9-1304273986/058dfefe62c30da70bfd9acd08ec10f9.png","label":["OCR"],"kind":["技术开发"],"formattedDate":"2025.3.22","updateBy":"1905468403685707778","updatedAt":1743173027701}
{"_id":"e23fc3b267e66ad5001119b3080e6e05","totalVisits":26,"owner":"1905468403685707778","classify":"学科竞赛","resourceId":"1111","totalZans":32,"totalCollection":111,"abstract":"111","title":"111","defaultImageUrl":"https://pic1.imgdb.cn/item/67e6b2f90ba3d5a1d7e5c270.jpg","content":"<!DOCTYPE html> <html lang=\"zh-CN\">  <head>   <meta charset=\"UTF-8\">   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">   <title>测试文本</title> </head>  <body>   <h1>这是一个一级标题</h1>   <p>这是一段普通的段落文本。在 HTML 中，段落标签 <code>&lt;p&gt;</code> 用于定义一个段落。我们可以在段落中包含各种文本内容，并且可以对其进行格式化和样式设置。</p>   <h2>这是一个二级标题</h2>   <p>以下是一个无序列表的示例：</p>   <ul>     <li>列表项 1</li>     <li>列表项 2</li>     <li>列表项 3</li>   </ul>   <p>以下是一个有序列表的示例：</p>   <ol>     <li>有序列表项 1</li>     <li>有序列表项 2</li>     <li>有序列表项 3</li>   </ol>   <p>这是一个 <a href=\"https://www.example.com\">链接</a>，点击它可以跳转到指定的网页。在 HTML 中，使用 <code>&lt;a&gt;</code> 标签来创建链接。</p>   <h3>代码示例</h3>   <pre><code>     function add(a, b) {       return a + b;     }     const result = add(3, 5);     console.log(result);   </code></pre>   <p>以上就是本次测试文本的所有内容，展示了 HTML 中一些常见元素的使用方式。</p> </body>  </html>","isShow":1,"_updateTime":2025.328,"createdAt":1743153877828,"_createTime":2025.328,"createBy":"1905468403685707778","totalComments":114,"updateBy":"1905468403685707778","_openid":"1905468403685707778","updatedAt":1743173148492,"formattedDate":"2025.3.28","kind":[],"label":[]}
